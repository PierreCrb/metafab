module.exports = {
  headerEcosystemKey: {
    name: 'X-Ecosystem-Key',
    in: 'header',
    description: 'The `publishedKey` of a specific ecosystem. This can be shared or included in clients, websites, etc.',
    example: 'ecosystem_pk_a5sFpDi8pQdnQgfCOBW29qR8YmwOhxVPz5iHoMgUEJLDdPXgwLuHqZf8ewo2GajZ',
    required: true,
    schema: { type: 'string' },
  },
  headerGameKey: {
    name: 'X-Game-Key',
    in: 'header',
    description: 'The `publishedKey` of a specific game. This can be shared or included in game clients, websites, etc.',
    example: 'game_pk_4SOqpDi8pQdnQgfCOBW29qR8YmwOhxVPz5iHoMgUEJLDdPXgwLuHqZf8ewo2GajZ',
    required: true,
    schema: { type: 'string' },
  },
  headerAuthorizationEcosystem: {
    name: 'X-Authorization',
    in: 'header',
    description: 'The `secretKey` of the authenticating ecosystem.',
    example: 'ecosystem_sk_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP',
    required: true,
    schema: { type: 'string' },
  },
  headerAuthorizationGame: {
    name: 'X-Authorization',
    in: 'header',
    description: 'The `secretKey` of the authenticating game.',
    example: 'game_sk_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP',
    required: true,
    schema: { type: 'string' },
  },
  headerAuthorizationPlayer: {
    name: 'X-Authorization',
    in: 'header',
    description: 'The `accessToken` of the authenticating player.',
    example: 'player_at_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP',
    required: true,
    schema: { type: 'string' },
  },
  headerAuthorizationProfile: {
    name: 'X-Authorization',
    in: 'header',
    description: 'The `accessToken` of the authenticating profile.',
    example: 'profile_at_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP',
    required: true,
    schema: { type: 'string' },
  },
  headerAuthorizationGameOrPlayer: {
    name: 'X-Authorization',
    in: 'header',
    description: 'The `secretKey` of a specific game or the `accessToken` of a specific player.',
    example: [
      'game_sk_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP',
      'player_at_02z4Mv3c85Ig0gNowY9Dq0N2kjb1xwzr27ArLE0669RrRI6dLf822iPO26K1p1FP',
    ],
    required: true,
    schema: { type: 'string' },
  },
  headerUsername: {
    name: 'X-Username',
    in: 'header',
    description: 'The username of a player.',
    example: 'arkdev',
    required: true,
    schema: { type: 'string' },
  },
  headerWalletDecryptKey: {
    name: 'X-Wallet-Decrypt-Key',
    in: 'header',
    description: 'The `walletDecryptKey` for the provided `walletId`.',
    example: 'AXNP8MKb+5SbBtHWrZu5KHh5/BomXY/dMRG/BDUn7a4=',
    required: true,
    schema: { type: 'string' },
  },
  headerWalletDecryptKeyGame: {
    name: 'X-Wallet-Decrypt-Key',
    in: 'header',
    description: 'The `walletDecryptKey` of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet.',
    example: 'AXNP8MKb+5SbBtHWrZu5KHh5/BomXY/dMRG/BDUn7a4=',
    required: true,
    schema: { type: 'string' },
  },
  headerWalletDecryptKeyPlayer: {
    name: 'X-Wallet-Decrypt-Key',
    in: 'header',
    description: 'The `walletDecryptKey` of the authenticating player. Required to decrypt and perform blockchain transactions with the player primary wallet.',
    example: 'AXNP8MKb+5SbBtHWrZu5KHh5/BomXY/dMRG/BDUn7a4=',
    required: true,
    schema: { type: 'string' },
  },
  headerWalletDecryptKeyGameOrPlayer: {
    name: 'X-Wallet-Decrypt-Key',
    in: 'header',
    description: 'The `walletDecryptKey` of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet.',
    example: 'AXNP8MKb+5SbBtHWrZu5KHh5/BomXY/dMRG/BDUn7a4=',
    required: true,
    schema: { type: 'string' },
  },
  headerWalletDecryptKeyProfile: {
    name: 'X-Wallet-Decrypt-Key',
    in: 'header',
    description: 'The `walletDecryptKey` of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet.',
    example: 'AXNP8MKb+5SbBtHWrZu5KHh5/BomXY/dMRG/BDUn7a4=',
    required: true,
    schema: { type: 'string' },
  },
  pathCollectionId: {
    name: 'collectionId',
    in: 'path',
    description: 'Any collection id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathCollectionItemId: {
    name: 'collectionItemId',
    in: 'path',
    description: 'Any item id for the collection. Zero, or a positive integer.',
    required: true,
    schema: { type: 'number' },
  },
  pathContractId: {
    name: 'contractId',
    in: 'path',
    description: 'Any contract id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathCurrencyId: {
    name: 'currencyId',
    in: 'path',
    description: 'Any currency id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathEcosystemId: {
    name: 'ecosystemId',
    in: 'path',
    description: 'Any ecosystem id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathEcosystemIdAuthenticated: {
    name: 'ecosystemId',
    in: 'path',
    description: 'The ecosystem id of the authenticating ecosystem.',
    required: true,
    schema: { type: 'string' },
  },
  pathGameId: {
    name: 'gameId',
    in: 'path',
    description: 'Any game id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathGameIdAuthenticated: {
    name: 'gameId',
    in: 'path',
    description: 'The game id of the authenticating game.',
    required: true,
    schema: { type: 'string' },
  },
  pathShopId: {
    name: 'shopId',
    in: 'path',
    description: 'Any shop id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathShopOfferId: {
    name: 'shopOfferId',
    in: 'path',
    description: 'Any offer id for the shop. Zero, or a positive integer.',
    required: true,
    schema: { type: 'string' },
  },
  pathLootboxManagerId: {
    name: 'lootboxManagerId',
    in: 'path',
    description: 'Any lootbox manager id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathLootboxManagerLootboxId: {
    name: 'lootboxManagerLootboxId',
    in: 'path',
    description: 'Any lootbox manager lootbox id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathServiceName: {
    name: 'serviceName',
    in: 'path',
    description: 'A 3rd party service supported by the MetaFab platform. This currently includes: `discord`',
    example: 'discord',
    required: true,
    schema: { type: 'string' },
  },
  pathTransactionId: {
    name: 'transactionId',
    in: 'path',
    description: 'Any transaction id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathPlayerId: {
    name: 'playerId',
    in: 'path',
    description: 'Any player id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathPlayerIdAuthenticated: {
    name: 'playerId',
    in: 'path',
    description: 'The player id of the authenticating player.',
    required: true,
    schema: { type: 'string' },
  },
  pathProfileId: {
    name: 'profileId',
    in: 'path',
    description: 'Any profile id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathProfileIdAuthenticated: {
    name: 'profileId',
    in: 'path',
    description: 'The profile id of the authenticating profile.',
    required: true,
    schema: { type: 'string' },
  },
  pathWalletId: {
    name: 'walletId',
    in: 'path',
    description: 'Any wallet id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  pathPlayerWalletId: {
    name: 'playerWalletId',
    in: 'path',
    description: 'Any player wallet id within the MetaFab platform.',
    required: true,
    schema: { type: 'string' },
  },
  queryAccessTokenExpiresAt: {
    name: 'accessTokenExpiresAt',
    in: 'query',
    description: 'An optional unix timestamp in seconds specifying when the returned `accessToken` should expire. If this value is provided, all prior `accessToken` will be invalidated and a new `accessToken` will be issued in the response. If no value is provided, the returned `accessToken` will not expire unless it is invalidated.',
    example: 1677197460,
    required: false,
    schema: { type: 'number' },
  },
  queryAddress: {
    name: 'address',
    in: 'query',
    description: 'A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.',
    example: '0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D',
    required: false,
    schema: { type: 'string' },
  },
  queryArgs: {
    name: 'args',
    in: 'query',
    description: 'A comma seperated list or JSON array of basic data type arguments. This is optional and only necessary if the function being invoked requires arguments per the contract ABI. For example, `123,"Hello",false` or `[1, 2, [1,2]]`.',
    example: '123,"Hello",false',
    required: false,
    schema: { type: 'string' },
  },
  queryFunc: {
    name: 'func',
    in: 'query',
    description: 'A contract function name. This can be any valid function from the the ABI of the contract you are interacting with. For example, `balanceOf`.',
    required: true,
    schema: { type: 'string' },
  },
  queryOperatorAddress: {
    name: 'operatorAddress',
    in: 'query',
    description: 'A valid EVM based address. For example, `0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D`.',
    example: '0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D',
    required: true,
    schema: { type: 'string' },
  },
  queryRole: {
    name: 'role',
    in: 'query',
    description: 'A valid MetaFab role or bytes string representing a role, such as `0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7`',
    example: 'minter',
    required: true,
    schema: { type: 'string' },
  },
  queryWalletId: {
    name: 'walletId',
    in: 'query',
    description: 'Any wallet id within the MetaFab platform.',
    required: false,
    schema: { type: 'string' },
  },
};
